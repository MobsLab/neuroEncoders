#!env/bin/python3
# neuroEncoder by the Memory, Oscillations and Brain States (MOBS) team
# 2017-2022
# by Thibault Balenbois, Pierre Orhan and Dmitri Bryzgalov
# t.balenbois@gmail.com; brygalovdm@gmail.com

# Load standard libs
import sys
import os
import subprocess
# Load custum code
from utils.global_classes import Project, Params
from importData import rawdata_parser

FILENAME = "/home/gruffalo/Dropbox/Mobs_member/Basile/Data/TEST/M1199_20210408_UMaze.xml"

ProjectPath = Project(os.path.expanduser(FILENAME), nameExp='TEST')
folderCode = "/home/gruffalo/Dropbox/Mobs_member/Basile/Code/full_neuroEncoder/neuroEncoders-master"

#Creating the file nnBehavior.mat 
#####################################################################################################################

#if not(os.path.isfile(os.path.expanduser(os.path.split(FILENAME)[0] + 
#                                          os.path.sep + 'nnBehavior.mat'))):
#		subprocess.run(["./getTsdFeature.sh", os.path.expanduser(FILENAME.strip('\'')),
#                  						'\''+"pos"+'\''])

##############################################################################################################################
#rawdata_parser.speed_filter(ProjectPath.folder, overWrite = False)
#rawdata_parser.select_epochs(ProjectPath.folder, overWrite = False)

#Creating the datasets
#################################################################################################################################

BUFFERSIZE = 72000
def julia_spike_filter(projectPath, folderCode, windowSize = 0.036, singleSpike=False):
    # Launch an extraction of the spikes in Julia:
    if singleSpike:
        test1 = os.path.isfile((os.path.join(projectPath.folder,"dataset","dataset_singleSpike.tfrec")))
    else:
        test1 = os.path.isfile((os.path.join(projectPath.folder, "dataset", "dataset_stride"+str(round(windowSize*1000))+".tfrec")))
    if not test1 :
        if not os.path.exists(os.path.join(projectPath.folder,'nnBehavior.mat')):
            raise ValueError('the behavior file does not exist :' + os.path.join(projectPath.folder,'nnBehavior.mat'))
        if not os.path.exists(projectPath.dat):
            raise ValueError('the dat file does not exist :' + projectPath.dat)
        codepath = os.path.join(folderCode,"importData/juliaData/")
        if singleSpike:
            subprocess.run([codepath + "executeFilter_singleSpike.sh",
                            codepath,
                            projectPath.xml,
                            projectPath.dat,
                            os.path.join(projectPath.folder,"nnBehavior.mat"),
                            os.path.join(projectPath.folder,"spikeData_fromJulia.csv"),
                            os.path.join(projectPath.folder,"dataset","dataset_singleSpike.tfrec"),
                            os.path.join(projectPath.folder, "dataset", "datasetSleep_singleSpike.tfrec"),
                            str(BUFFERSIZE),
                            str(windowSize)])
        else:
            subprocess.run([os.path.join(codepath, "executeFilter_stride.sh"),
                            codepath,
                            projectPath.xml,
                            projectPath.dat,
                            os.path.join(projectPath.folder,"nnBehavior.mat"),
                            os.path.join(projectPath.folder,"spikeData_fromJulia.csv"),
                            os.path.join(projectPath.folder,"dataset","dataset_stride"+str(round(windowSize*1000))+".tfrec"),
                            os.path.join(projectPath.folder, "dataset", "datasetSleep_stride"+str(round(windowSize*1000))+".tfrec"),
                            str(BUFFERSIZE),
                            str(windowSize),
                            str(0.036)]) #the striding is 36ms based...

#julia_spike_filter(ProjectPath, folderCode)

############################################################################################################################

rawdata_parser.DataHelper(ProjectPath, 'ann')

from transformData.linearizer import UMazeLinearizer
from resultAnalysis import print_results
from fullEncoder import an_network as Training
from openEphysExport.generate_json import generate_json
from resultAnalysis import print_results
import os
os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
# Create parameters
DataHelper = rawdata_parser.DataHelper(ProjectPath, 'ann')
Parameters = Params(DataHelper, 0.036)
# Create linearization function
Linearizer = UMazeLinearizer(ProjectPath.folder)
Linearizer.verify_linearization(DataHelper.position/DataHelper.maxPos(),
                                    ProjectPath.folder, overwrite=False)
l_function = Linearizer.pykeops_linearization

isPL = False
# Network
'''
NNTrainer = Training.LSTMandSpikeNetwork(ProjectPath, Parameters,
                                        deviceName='/device:GPU:0')
NNTrainer.fix_linearizer(Linearizer.mazePoints, Linearizer.tsProj)
NNTrainer.train(DataHelper.fullBehavior, windowsizeMS=0.036,
                    isPredLoss=isPL)
NNTrainer.test(DataHelper.fullBehavior, l_function=l_function,
                                    windowsizeMS=0.036, isPredLoss=isPL)
print_results.print_results(NNTrainer.folderResult, windowSizeMS=0.036)
# Create json

modelPath = os.path.join(NNTrainer.folderModels, str(0.036),
                                    'savedModels', 'fullModel')
generate_json(ProjectPath, modelPath, DataHelper.list_channels)
'''

from simpleBayes import decode_bayes as Training
		
TrainerBayes = Training.Trainer(ProjectPath)
bayesMatrices = TrainerBayes.train_order_by_pos(DataHelper.fullBehavior,
                                                  				l_function)
outputs = TrainerBayes.test_parallel(DataHelper.fullBehavior, bayesMatrices,
                                       			windowSizeMS=0.036)
print_results.print_results(TrainerBayes.folderResult, typeDec='bayes',
                            			results = outputs, windowSizeMS=0.036)
