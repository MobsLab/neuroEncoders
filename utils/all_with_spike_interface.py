"""
Here is an example of opening viewers directly from spikeinterface objects : recording and sorting.

In this example, recording and sorting are fake ones generated by spikeinterface but of you course
you can use any format supported by spikeinterface.

Note that you can display any lazy preprocessor from
`spikeinterface.toolkit.preprocessing` (filtering, denoising, whittening, ...) so you can see immediatly
the clean signal.



"""

import argparse
import os

import ephyviewer
import spikeinterface.full as si
from matplotlib import colormaps
from matplotlib.colors import rgb2hex

argparser = argparse.ArgumentParser(description="View Neuroscope data")
argparser.add_argument("--filename", "-f", type=str, help="Path to Neuroscope data")
args = argparser.parse_args()

recording = si.NeuroScopeRecordingExtractor(file_path=args.filename)

channel_groups = recording.get_channel_groups()


sig_source = ephyviewer.SpikeInterfaceRecordingSource(recording=recording)

app = ephyviewer.mkQApp()
win = ephyviewer.MainViewer(debug=True, show_auto_scale=True)

view = ephyviewer.TraceViewer(source=sig_source, name="signals")

view.params["scale_mode"] = "same_for_all"
view.params["display_labels"] = True

cmap = colormaps["tab20"].colors

for group_id, numbers in enumerate(channel_groups):
    channel_id = recording.get_channel_ids()[numbers]
    view.by_channel_params[f"ch{group_id}", "color"] = rgb2hex(cmap[numbers])


view.auto_scale()

win.add_view(view)


win.show()
app.exec()
